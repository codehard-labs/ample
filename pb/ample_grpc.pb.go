// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package ample

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AmpleClient is the client API for Ample service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AmpleClient interface {
	GetAllSources(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*AllSourcesReply, error)
	GetAllTokens(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*AllTokensReply, error)
	GetAllSourcePositionControls(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*AllSourcePositionControlsReply, error)
	GetAllObexTradingPairs(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*AllObexTradingPairsReply, error)
	GetAllEvmChainClients(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*AllEvmChainClientsReply, error)
	GetAllUniV2Dexs(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*AllUniV2DexsReply, error)
	//
	GetRawJsonConfig(ctx context.Context, in *KeyRequest, opts ...grpc.CallOption) (*RawJsonConfigReply, error)
}

type ampleClient struct {
	cc grpc.ClientConnInterface
}

func NewAmpleClient(cc grpc.ClientConnInterface) AmpleClient {
	return &ampleClient{cc}
}

func (c *ampleClient) GetAllSources(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*AllSourcesReply, error) {
	out := new(AllSourcesReply)
	err := c.cc.Invoke(ctx, "/ample.Ample/GetAllSources", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ampleClient) GetAllTokens(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*AllTokensReply, error) {
	out := new(AllTokensReply)
	err := c.cc.Invoke(ctx, "/ample.Ample/GetAllTokens", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ampleClient) GetAllSourcePositionControls(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*AllSourcePositionControlsReply, error) {
	out := new(AllSourcePositionControlsReply)
	err := c.cc.Invoke(ctx, "/ample.Ample/GetAllSourcePositionControls", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ampleClient) GetAllObexTradingPairs(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*AllObexTradingPairsReply, error) {
	out := new(AllObexTradingPairsReply)
	err := c.cc.Invoke(ctx, "/ample.Ample/GetAllObexTradingPairs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ampleClient) GetAllEvmChainClients(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*AllEvmChainClientsReply, error) {
	out := new(AllEvmChainClientsReply)
	err := c.cc.Invoke(ctx, "/ample.Ample/GetAllEvmChainClients", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ampleClient) GetAllUniV2Dexs(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*AllUniV2DexsReply, error) {
	out := new(AllUniV2DexsReply)
	err := c.cc.Invoke(ctx, "/ample.Ample/GetAllUniV2Dexs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ampleClient) GetRawJsonConfig(ctx context.Context, in *KeyRequest, opts ...grpc.CallOption) (*RawJsonConfigReply, error) {
	out := new(RawJsonConfigReply)
	err := c.cc.Invoke(ctx, "/ample.Ample/GetRawJsonConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AmpleServer is the server API for Ample service.
// All implementations must embed UnimplementedAmpleServer
// for forward compatibility
type AmpleServer interface {
	GetAllSources(context.Context, *EmptyRequest) (*AllSourcesReply, error)
	GetAllTokens(context.Context, *EmptyRequest) (*AllTokensReply, error)
	GetAllSourcePositionControls(context.Context, *EmptyRequest) (*AllSourcePositionControlsReply, error)
	GetAllObexTradingPairs(context.Context, *EmptyRequest) (*AllObexTradingPairsReply, error)
	GetAllEvmChainClients(context.Context, *EmptyRequest) (*AllEvmChainClientsReply, error)
	GetAllUniV2Dexs(context.Context, *EmptyRequest) (*AllUniV2DexsReply, error)
	//
	GetRawJsonConfig(context.Context, *KeyRequest) (*RawJsonConfigReply, error)
	mustEmbedUnimplementedAmpleServer()
}

// UnimplementedAmpleServer must be embedded to have forward compatible implementations.
type UnimplementedAmpleServer struct {
}

func (UnimplementedAmpleServer) GetAllSources(context.Context, *EmptyRequest) (*AllSourcesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllSources not implemented")
}
func (UnimplementedAmpleServer) GetAllTokens(context.Context, *EmptyRequest) (*AllTokensReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllTokens not implemented")
}
func (UnimplementedAmpleServer) GetAllSourcePositionControls(context.Context, *EmptyRequest) (*AllSourcePositionControlsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllSourcePositionControls not implemented")
}
func (UnimplementedAmpleServer) GetAllObexTradingPairs(context.Context, *EmptyRequest) (*AllObexTradingPairsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllObexTradingPairs not implemented")
}
func (UnimplementedAmpleServer) GetAllEvmChainClients(context.Context, *EmptyRequest) (*AllEvmChainClientsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllEvmChainClients not implemented")
}
func (UnimplementedAmpleServer) GetAllUniV2Dexs(context.Context, *EmptyRequest) (*AllUniV2DexsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllUniV2Dexs not implemented")
}
func (UnimplementedAmpleServer) GetRawJsonConfig(context.Context, *KeyRequest) (*RawJsonConfigReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRawJsonConfig not implemented")
}
func (UnimplementedAmpleServer) mustEmbedUnimplementedAmpleServer() {}

// UnsafeAmpleServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AmpleServer will
// result in compilation errors.
type UnsafeAmpleServer interface {
	mustEmbedUnimplementedAmpleServer()
}

func RegisterAmpleServer(s grpc.ServiceRegistrar, srv AmpleServer) {
	s.RegisterService(&Ample_ServiceDesc, srv)
}

func _Ample_GetAllSources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AmpleServer).GetAllSources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ample.Ample/GetAllSources",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AmpleServer).GetAllSources(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ample_GetAllTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AmpleServer).GetAllTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ample.Ample/GetAllTokens",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AmpleServer).GetAllTokens(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ample_GetAllSourcePositionControls_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AmpleServer).GetAllSourcePositionControls(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ample.Ample/GetAllSourcePositionControls",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AmpleServer).GetAllSourcePositionControls(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ample_GetAllObexTradingPairs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AmpleServer).GetAllObexTradingPairs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ample.Ample/GetAllObexTradingPairs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AmpleServer).GetAllObexTradingPairs(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ample_GetAllEvmChainClients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AmpleServer).GetAllEvmChainClients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ample.Ample/GetAllEvmChainClients",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AmpleServer).GetAllEvmChainClients(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ample_GetAllUniV2Dexs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AmpleServer).GetAllUniV2Dexs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ample.Ample/GetAllUniV2Dexs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AmpleServer).GetAllUniV2Dexs(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ample_GetRawJsonConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AmpleServer).GetRawJsonConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ample.Ample/GetRawJsonConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AmpleServer).GetRawJsonConfig(ctx, req.(*KeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Ample_ServiceDesc is the grpc.ServiceDesc for Ample service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Ample_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ample.Ample",
	HandlerType: (*AmpleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllSources",
			Handler:    _Ample_GetAllSources_Handler,
		},
		{
			MethodName: "GetAllTokens",
			Handler:    _Ample_GetAllTokens_Handler,
		},
		{
			MethodName: "GetAllSourcePositionControls",
			Handler:    _Ample_GetAllSourcePositionControls_Handler,
		},
		{
			MethodName: "GetAllObexTradingPairs",
			Handler:    _Ample_GetAllObexTradingPairs_Handler,
		},
		{
			MethodName: "GetAllEvmChainClients",
			Handler:    _Ample_GetAllEvmChainClients_Handler,
		},
		{
			MethodName: "GetAllUniV2Dexs",
			Handler:    _Ample_GetAllUniV2Dexs_Handler,
		},
		{
			MethodName: "GetRawJsonConfig",
			Handler:    _Ample_GetRawJsonConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/ample.proto",
}
