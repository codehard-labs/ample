// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.18.0
// source: pb/ample.proto

package ample

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EmptyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EmptyRequest) Reset() {
	*x = EmptyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_ample_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmptyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptyRequest) ProtoMessage() {}

func (x *EmptyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_ample_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptyRequest.ProtoReflect.Descriptor instead.
func (*EmptyRequest) Descriptor() ([]byte, []int) {
	return file_pb_ample_proto_rawDescGZIP(), []int{0}
}

type AllSourcesReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok      bool                           `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	Sources []*AllSourcesReply_SourceReply `protobuf:"bytes,3,rep,name=sources,proto3" json:"sources,omitempty"`
}

func (x *AllSourcesReply) Reset() {
	*x = AllSourcesReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_ample_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllSourcesReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllSourcesReply) ProtoMessage() {}

func (x *AllSourcesReply) ProtoReflect() protoreflect.Message {
	mi := &file_pb_ample_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllSourcesReply.ProtoReflect.Descriptor instead.
func (*AllSourcesReply) Descriptor() ([]byte, []int) {
	return file_pb_ample_proto_rawDescGZIP(), []int{1}
}

func (x *AllSourcesReply) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *AllSourcesReply) GetSources() []*AllSourcesReply_SourceReply {
	if x != nil {
		return x.Sources
	}
	return nil
}

type AllTokensReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok     bool                         `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	Tokens []*AllTokensReply_TokenReply `protobuf:"bytes,2,rep,name=tokens,proto3" json:"tokens,omitempty"`
}

func (x *AllTokensReply) Reset() {
	*x = AllTokensReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_ample_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllTokensReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllTokensReply) ProtoMessage() {}

func (x *AllTokensReply) ProtoReflect() protoreflect.Message {
	mi := &file_pb_ample_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllTokensReply.ProtoReflect.Descriptor instead.
func (*AllTokensReply) Descriptor() ([]byte, []int) {
	return file_pb_ample_proto_rawDescGZIP(), []int{2}
}

func (x *AllTokensReply) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *AllTokensReply) GetTokens() []*AllTokensReply_TokenReply {
	if x != nil {
		return x.Tokens
	}
	return nil
}

type AllSourcePositionControlsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok             bool                                                         `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	SourceControls []*AllSourcePositionControlsReply_SourcePositionControlReply `protobuf:"bytes,2,rep,name=source_controls,json=sourceControls,proto3" json:"source_controls,omitempty"`
}

func (x *AllSourcePositionControlsReply) Reset() {
	*x = AllSourcePositionControlsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_ample_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllSourcePositionControlsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllSourcePositionControlsReply) ProtoMessage() {}

func (x *AllSourcePositionControlsReply) ProtoReflect() protoreflect.Message {
	mi := &file_pb_ample_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllSourcePositionControlsReply.ProtoReflect.Descriptor instead.
func (*AllSourcePositionControlsReply) Descriptor() ([]byte, []int) {
	return file_pb_ample_proto_rawDescGZIP(), []int{3}
}

func (x *AllSourcePositionControlsReply) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *AllSourcePositionControlsReply) GetSourceControls() []*AllSourcePositionControlsReply_SourcePositionControlReply {
	if x != nil {
		return x.SourceControls
	}
	return nil
}

type AllObexTradingPairsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok    bool                                             `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	Pairs []*AllObexTradingPairsReply_ObexTradingPairReply `protobuf:"bytes,2,rep,name=pairs,proto3" json:"pairs,omitempty"`
}

func (x *AllObexTradingPairsReply) Reset() {
	*x = AllObexTradingPairsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_ample_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllObexTradingPairsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllObexTradingPairsReply) ProtoMessage() {}

func (x *AllObexTradingPairsReply) ProtoReflect() protoreflect.Message {
	mi := &file_pb_ample_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllObexTradingPairsReply.ProtoReflect.Descriptor instead.
func (*AllObexTradingPairsReply) Descriptor() ([]byte, []int) {
	return file_pb_ample_proto_rawDescGZIP(), []int{4}
}

func (x *AllObexTradingPairsReply) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *AllObexTradingPairsReply) GetPairs() []*AllObexTradingPairsReply_ObexTradingPairReply {
	if x != nil {
		return x.Pairs
	}
	return nil
}

type AllEvmChainClientsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok      bool                                           `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	Clients []*AllEvmChainClientsReply_EvmChainClientReply `protobuf:"bytes,2,rep,name=clients,proto3" json:"clients,omitempty"`
}

func (x *AllEvmChainClientsReply) Reset() {
	*x = AllEvmChainClientsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_ample_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllEvmChainClientsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllEvmChainClientsReply) ProtoMessage() {}

func (x *AllEvmChainClientsReply) ProtoReflect() protoreflect.Message {
	mi := &file_pb_ample_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllEvmChainClientsReply.ProtoReflect.Descriptor instead.
func (*AllEvmChainClientsReply) Descriptor() ([]byte, []int) {
	return file_pb_ample_proto_rawDescGZIP(), []int{5}
}

func (x *AllEvmChainClientsReply) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *AllEvmChainClientsReply) GetClients() []*AllEvmChainClientsReply_EvmChainClientReply {
	if x != nil {
		return x.Clients
	}
	return nil
}

type AllUniV2DexsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok   bool                               `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	Dexs []*AllUniV2DexsReply_UniV2DexReply `protobuf:"bytes,2,rep,name=dexs,proto3" json:"dexs,omitempty"`
}

func (x *AllUniV2DexsReply) Reset() {
	*x = AllUniV2DexsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_ample_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllUniV2DexsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllUniV2DexsReply) ProtoMessage() {}

func (x *AllUniV2DexsReply) ProtoReflect() protoreflect.Message {
	mi := &file_pb_ample_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllUniV2DexsReply.ProtoReflect.Descriptor instead.
func (*AllUniV2DexsReply) Descriptor() ([]byte, []int) {
	return file_pb_ample_proto_rawDescGZIP(), []int{6}
}

func (x *AllUniV2DexsReply) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *AllUniV2DexsReply) GetDexs() []*AllUniV2DexsReply_UniV2DexReply {
	if x != nil {
		return x.Dexs
	}
	return nil
}

type KeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *KeyRequest) Reset() {
	*x = KeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_ample_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyRequest) ProtoMessage() {}

func (x *KeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_ample_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyRequest.ProtoReflect.Descriptor instead.
func (*KeyRequest) Descriptor() ([]byte, []int) {
	return file_pb_ample_proto_rawDescGZIP(), []int{7}
}

func (x *KeyRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type RawJsonConfigReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok        bool   `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	RawString string `protobuf:"bytes,2,opt,name=raw_string,json=rawString,proto3" json:"raw_string,omitempty"`
}

func (x *RawJsonConfigReply) Reset() {
	*x = RawJsonConfigReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_ample_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RawJsonConfigReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RawJsonConfigReply) ProtoMessage() {}

func (x *RawJsonConfigReply) ProtoReflect() protoreflect.Message {
	mi := &file_pb_ample_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RawJsonConfigReply.ProtoReflect.Descriptor instead.
func (*RawJsonConfigReply) Descriptor() ([]byte, []int) {
	return file_pb_ample_proto_rawDescGZIP(), []int{8}
}

func (x *RawJsonConfigReply) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *RawJsonConfigReply) GetRawString() string {
	if x != nil {
		return x.RawString
	}
	return ""
}

type AllSourcesReply_SourceReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type    string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	On      bool   `protobuf:"varint,3,opt,name=on,proto3" json:"on,omitempty"`
	Trading bool   `protobuf:"varint,4,opt,name=trading,proto3" json:"trading,omitempty"`
}

func (x *AllSourcesReply_SourceReply) Reset() {
	*x = AllSourcesReply_SourceReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_ample_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllSourcesReply_SourceReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllSourcesReply_SourceReply) ProtoMessage() {}

func (x *AllSourcesReply_SourceReply) ProtoReflect() protoreflect.Message {
	mi := &file_pb_ample_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllSourcesReply_SourceReply.ProtoReflect.Descriptor instead.
func (*AllSourcesReply_SourceReply) Descriptor() ([]byte, []int) {
	return file_pb_ample_proto_rawDescGZIP(), []int{1, 0}
}

func (x *AllSourcesReply_SourceReply) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AllSourcesReply_SourceReply) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *AllSourcesReply_SourceReply) GetOn() bool {
	if x != nil {
		return x.On
	}
	return false
}

func (x *AllSourcesReply_SourceReply) GetTrading() bool {
	if x != nil {
		return x.Trading
	}
	return false
}

type AllTokensReply_TokenReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssetName  string `protobuf:"bytes,1,opt,name=asset_name,json=assetName,proto3" json:"asset_name,omitempty"`
	GroupName  string `protobuf:"bytes,2,opt,name=group_name,json=groupName,proto3" json:"group_name,omitempty"`
	Source     string `protobuf:"bytes,3,opt,name=source,proto3" json:"source,omitempty"`
	Identifier string `protobuf:"bytes,4,opt,name=identifier,proto3" json:"identifier,omitempty"`
	Decimals   uint32 `protobuf:"varint,5,opt,name=decimals,proto3" json:"decimals,omitempty"`
	Trading    bool   `protobuf:"varint,6,opt,name=trading,proto3" json:"trading,omitempty"`
}

func (x *AllTokensReply_TokenReply) Reset() {
	*x = AllTokensReply_TokenReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_ample_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllTokensReply_TokenReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllTokensReply_TokenReply) ProtoMessage() {}

func (x *AllTokensReply_TokenReply) ProtoReflect() protoreflect.Message {
	mi := &file_pb_ample_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllTokensReply_TokenReply.ProtoReflect.Descriptor instead.
func (*AllTokensReply_TokenReply) Descriptor() ([]byte, []int) {
	return file_pb_ample_proto_rawDescGZIP(), []int{2, 0}
}

func (x *AllTokensReply_TokenReply) GetAssetName() string {
	if x != nil {
		return x.AssetName
	}
	return ""
}

func (x *AllTokensReply_TokenReply) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

func (x *AllTokensReply_TokenReply) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *AllTokensReply_TokenReply) GetIdentifier() string {
	if x != nil {
		return x.Identifier
	}
	return ""
}

func (x *AllTokensReply_TokenReply) GetDecimals() uint32 {
	if x != nil {
		return x.Decimals
	}
	return 0
}

func (x *AllTokensReply_TokenReply) GetTrading() bool {
	if x != nil {
		return x.Trading
	}
	return false
}

type AllSourcePositionControlsReply_SourcePositionControlReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceName string                                                                            `protobuf:"bytes,1,opt,name=source_name,json=sourceName,proto3" json:"source_name,omitempty"`
	WeightSum  int32                                                                             `protobuf:"varint,2,opt,name=weight_sum,json=weightSum,proto3" json:"weight_sum,omitempty"`
	Controls   []*AllSourcePositionControlsReply_SourcePositionControlReply_PositionControlReply `protobuf:"bytes,3,rep,name=controls,proto3" json:"controls,omitempty"`
}

func (x *AllSourcePositionControlsReply_SourcePositionControlReply) Reset() {
	*x = AllSourcePositionControlsReply_SourcePositionControlReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_ample_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllSourcePositionControlsReply_SourcePositionControlReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllSourcePositionControlsReply_SourcePositionControlReply) ProtoMessage() {}

func (x *AllSourcePositionControlsReply_SourcePositionControlReply) ProtoReflect() protoreflect.Message {
	mi := &file_pb_ample_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllSourcePositionControlsReply_SourcePositionControlReply.ProtoReflect.Descriptor instead.
func (*AllSourcePositionControlsReply_SourcePositionControlReply) Descriptor() ([]byte, []int) {
	return file_pb_ample_proto_rawDescGZIP(), []int{3, 0}
}

func (x *AllSourcePositionControlsReply_SourcePositionControlReply) GetSourceName() string {
	if x != nil {
		return x.SourceName
	}
	return ""
}

func (x *AllSourcePositionControlsReply_SourcePositionControlReply) GetWeightSum() int32 {
	if x != nil {
		return x.WeightSum
	}
	return 0
}

func (x *AllSourcePositionControlsReply_SourcePositionControlReply) GetControls() []*AllSourcePositionControlsReply_SourcePositionControlReply_PositionControlReply {
	if x != nil {
		return x.Controls
	}
	return nil
}

type AllSourcePositionControlsReply_SourcePositionControlReply_PositionControlReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Asset             string `protobuf:"bytes,1,opt,name=asset,proto3" json:"asset,omitempty"`
	WeightControlOn   bool   `protobuf:"varint,2,opt,name=weight_control_on,json=weightControlOn,proto3" json:"weight_control_on,omitempty"`
	WeightMin         int32  `protobuf:"varint,3,opt,name=weight_min,json=weightMin,proto3" json:"weight_min,omitempty"`
	WeightMax         int32  `protobuf:"varint,4,opt,name=weight_max,json=weightMax,proto3" json:"weight_max,omitempty"`
	QuantityControlOn bool   `protobuf:"varint,5,opt,name=quantity_control_on,json=quantityControlOn,proto3" json:"quantity_control_on,omitempty"`
	QuantityMin       string `protobuf:"bytes,6,opt,name=quantity_min,json=quantityMin,proto3" json:"quantity_min,omitempty"`
	QuantityMax       string `protobuf:"bytes,7,opt,name=quantity_max,json=quantityMax,proto3" json:"quantity_max,omitempty"`
}

func (x *AllSourcePositionControlsReply_SourcePositionControlReply_PositionControlReply) Reset() {
	*x = AllSourcePositionControlsReply_SourcePositionControlReply_PositionControlReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_ample_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllSourcePositionControlsReply_SourcePositionControlReply_PositionControlReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllSourcePositionControlsReply_SourcePositionControlReply_PositionControlReply) ProtoMessage() {
}

func (x *AllSourcePositionControlsReply_SourcePositionControlReply_PositionControlReply) ProtoReflect() protoreflect.Message {
	mi := &file_pb_ample_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllSourcePositionControlsReply_SourcePositionControlReply_PositionControlReply.ProtoReflect.Descriptor instead.
func (*AllSourcePositionControlsReply_SourcePositionControlReply_PositionControlReply) Descriptor() ([]byte, []int) {
	return file_pb_ample_proto_rawDescGZIP(), []int{3, 0, 0}
}

func (x *AllSourcePositionControlsReply_SourcePositionControlReply_PositionControlReply) GetAsset() string {
	if x != nil {
		return x.Asset
	}
	return ""
}

func (x *AllSourcePositionControlsReply_SourcePositionControlReply_PositionControlReply) GetWeightControlOn() bool {
	if x != nil {
		return x.WeightControlOn
	}
	return false
}

func (x *AllSourcePositionControlsReply_SourcePositionControlReply_PositionControlReply) GetWeightMin() int32 {
	if x != nil {
		return x.WeightMin
	}
	return 0
}

func (x *AllSourcePositionControlsReply_SourcePositionControlReply_PositionControlReply) GetWeightMax() int32 {
	if x != nil {
		return x.WeightMax
	}
	return 0
}

func (x *AllSourcePositionControlsReply_SourcePositionControlReply_PositionControlReply) GetQuantityControlOn() bool {
	if x != nil {
		return x.QuantityControlOn
	}
	return false
}

func (x *AllSourcePositionControlsReply_SourcePositionControlReply_PositionControlReply) GetQuantityMin() string {
	if x != nil {
		return x.QuantityMin
	}
	return ""
}

func (x *AllSourcePositionControlsReply_SourcePositionControlReply_PositionControlReply) GetQuantityMax() string {
	if x != nil {
		return x.QuantityMax
	}
	return ""
}

type AllObexTradingPairsReply_ObexTradingPairReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PairName     string `protobuf:"bytes,1,opt,name=pair_name,json=pairName,proto3" json:"pair_name,omitempty"`
	PairType     string `protobuf:"bytes,2,opt,name=pair_type,json=pairType,proto3" json:"pair_type,omitempty"`
	ExchangeName string `protobuf:"bytes,3,opt,name=exchange_name,json=exchangeName,proto3" json:"exchange_name,omitempty"`
	QuoteAsset   string `protobuf:"bytes,4,opt,name=quote_asset,json=quoteAsset,proto3" json:"quote_asset,omitempty"`
	BaseAsset    string `protobuf:"bytes,5,opt,name=base_asset,json=baseAsset,proto3" json:"base_asset,omitempty"`
	StepSize     string `protobuf:"bytes,6,opt,name=step_size,json=stepSize,proto3" json:"step_size,omitempty"`
	TakerFee     string `protobuf:"bytes,7,opt,name=taker_fee,json=takerFee,proto3" json:"taker_fee,omitempty"`
	Trading      bool   `protobuf:"varint,8,opt,name=trading,proto3" json:"trading,omitempty"`
}

func (x *AllObexTradingPairsReply_ObexTradingPairReply) Reset() {
	*x = AllObexTradingPairsReply_ObexTradingPairReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_ample_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllObexTradingPairsReply_ObexTradingPairReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllObexTradingPairsReply_ObexTradingPairReply) ProtoMessage() {}

func (x *AllObexTradingPairsReply_ObexTradingPairReply) ProtoReflect() protoreflect.Message {
	mi := &file_pb_ample_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllObexTradingPairsReply_ObexTradingPairReply.ProtoReflect.Descriptor instead.
func (*AllObexTradingPairsReply_ObexTradingPairReply) Descriptor() ([]byte, []int) {
	return file_pb_ample_proto_rawDescGZIP(), []int{4, 0}
}

func (x *AllObexTradingPairsReply_ObexTradingPairReply) GetPairName() string {
	if x != nil {
		return x.PairName
	}
	return ""
}

func (x *AllObexTradingPairsReply_ObexTradingPairReply) GetPairType() string {
	if x != nil {
		return x.PairType
	}
	return ""
}

func (x *AllObexTradingPairsReply_ObexTradingPairReply) GetExchangeName() string {
	if x != nil {
		return x.ExchangeName
	}
	return ""
}

func (x *AllObexTradingPairsReply_ObexTradingPairReply) GetQuoteAsset() string {
	if x != nil {
		return x.QuoteAsset
	}
	return ""
}

func (x *AllObexTradingPairsReply_ObexTradingPairReply) GetBaseAsset() string {
	if x != nil {
		return x.BaseAsset
	}
	return ""
}

func (x *AllObexTradingPairsReply_ObexTradingPairReply) GetStepSize() string {
	if x != nil {
		return x.StepSize
	}
	return ""
}

func (x *AllObexTradingPairsReply_ObexTradingPairReply) GetTakerFee() string {
	if x != nil {
		return x.TakerFee
	}
	return ""
}

func (x *AllObexTradingPairsReply_ObexTradingPairReply) GetTrading() bool {
	if x != nil {
		return x.Trading
	}
	return false
}

type AllEvmChainClientsReply_EvmChainClientReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChainName              string   `protobuf:"bytes,1,opt,name=chain_name,json=chainName,proto3" json:"chain_name,omitempty"`
	ChainId                uint64   `protobuf:"varint,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	NativeAsset            string   `protobuf:"bytes,3,opt,name=native_asset,json=nativeAsset,proto3" json:"native_asset,omitempty"`
	MainRpcAddress         string   `protobuf:"bytes,4,opt,name=main_rpc_address,json=mainRpcAddress,proto3" json:"main_rpc_address,omitempty"`
	BroadcastRpcAddresses  []string `protobuf:"bytes,5,rep,name=broadcast_rpc_addresses,json=broadcastRpcAddresses,proto3" json:"broadcast_rpc_addresses,omitempty"`
	TradingContractAddress string   `protobuf:"bytes,6,opt,name=trading_contract_address,json=tradingContractAddress,proto3" json:"trading_contract_address,omitempty"`
	TradingContractVersion string   `protobuf:"bytes,7,opt,name=trading_contract_version,json=tradingContractVersion,proto3" json:"trading_contract_version,omitempty"`
	RegisteredWorkers      uint32   `protobuf:"varint,8,opt,name=registered_workers,json=registeredWorkers,proto3" json:"registered_workers,omitempty"`
	GasMode                string   `protobuf:"bytes,9,opt,name=gas_mode,json=gasMode,proto3" json:"gas_mode,omitempty"`
	GasType                string   `protobuf:"bytes,10,opt,name=gas_type,json=gasType,proto3" json:"gas_type,omitempty"`
	GasSpecs               []string `protobuf:"bytes,11,rep,name=gas_specs,json=gasSpecs,proto3" json:"gas_specs,omitempty"`
	SyncMode               string   `protobuf:"bytes,12,opt,name=sync_mode,json=syncMode,proto3" json:"sync_mode,omitempty"`
	BlocksBeforeResync     uint64   `protobuf:"varint,13,opt,name=blocks_before_resync,json=blocksBeforeResync,proto3" json:"blocks_before_resync,omitempty"`
	CallStatic             bool     `protobuf:"varint,14,opt,name=call_static,json=callStatic,proto3" json:"call_static,omitempty"`
}

func (x *AllEvmChainClientsReply_EvmChainClientReply) Reset() {
	*x = AllEvmChainClientsReply_EvmChainClientReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_ample_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllEvmChainClientsReply_EvmChainClientReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllEvmChainClientsReply_EvmChainClientReply) ProtoMessage() {}

func (x *AllEvmChainClientsReply_EvmChainClientReply) ProtoReflect() protoreflect.Message {
	mi := &file_pb_ample_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllEvmChainClientsReply_EvmChainClientReply.ProtoReflect.Descriptor instead.
func (*AllEvmChainClientsReply_EvmChainClientReply) Descriptor() ([]byte, []int) {
	return file_pb_ample_proto_rawDescGZIP(), []int{5, 0}
}

func (x *AllEvmChainClientsReply_EvmChainClientReply) GetChainName() string {
	if x != nil {
		return x.ChainName
	}
	return ""
}

func (x *AllEvmChainClientsReply_EvmChainClientReply) GetChainId() uint64 {
	if x != nil {
		return x.ChainId
	}
	return 0
}

func (x *AllEvmChainClientsReply_EvmChainClientReply) GetNativeAsset() string {
	if x != nil {
		return x.NativeAsset
	}
	return ""
}

func (x *AllEvmChainClientsReply_EvmChainClientReply) GetMainRpcAddress() string {
	if x != nil {
		return x.MainRpcAddress
	}
	return ""
}

func (x *AllEvmChainClientsReply_EvmChainClientReply) GetBroadcastRpcAddresses() []string {
	if x != nil {
		return x.BroadcastRpcAddresses
	}
	return nil
}

func (x *AllEvmChainClientsReply_EvmChainClientReply) GetTradingContractAddress() string {
	if x != nil {
		return x.TradingContractAddress
	}
	return ""
}

func (x *AllEvmChainClientsReply_EvmChainClientReply) GetTradingContractVersion() string {
	if x != nil {
		return x.TradingContractVersion
	}
	return ""
}

func (x *AllEvmChainClientsReply_EvmChainClientReply) GetRegisteredWorkers() uint32 {
	if x != nil {
		return x.RegisteredWorkers
	}
	return 0
}

func (x *AllEvmChainClientsReply_EvmChainClientReply) GetGasMode() string {
	if x != nil {
		return x.GasMode
	}
	return ""
}

func (x *AllEvmChainClientsReply_EvmChainClientReply) GetGasType() string {
	if x != nil {
		return x.GasType
	}
	return ""
}

func (x *AllEvmChainClientsReply_EvmChainClientReply) GetGasSpecs() []string {
	if x != nil {
		return x.GasSpecs
	}
	return nil
}

func (x *AllEvmChainClientsReply_EvmChainClientReply) GetSyncMode() string {
	if x != nil {
		return x.SyncMode
	}
	return ""
}

func (x *AllEvmChainClientsReply_EvmChainClientReply) GetBlocksBeforeResync() uint64 {
	if x != nil {
		return x.BlocksBeforeResync
	}
	return 0
}

func (x *AllEvmChainClientsReply_EvmChainClientReply) GetCallStatic() bool {
	if x != nil {
		return x.CallStatic
	}
	return false
}

type AllUniV2DexsReply_UniV2DexReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name           string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Source         string `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	RouterAddress  string `protobuf:"bytes,3,opt,name=router_address,json=routerAddress,proto3" json:"router_address,omitempty"`
	FactoryAddress string `protobuf:"bytes,4,opt,name=factory_address,json=factoryAddress,proto3" json:"factory_address,omitempty"`
	SubType        string `protobuf:"bytes,5,opt,name=sub_type,json=subType,proto3" json:"sub_type,omitempty"`
	FeeN           uint64 `protobuf:"varint,6,opt,name=fee_n,json=feeN,proto3" json:"fee_n,omitempty"`
	FeeD           uint64 `protobuf:"varint,7,opt,name=fee_d,json=feeD,proto3" json:"fee_d,omitempty"`
	Trading        bool   `protobuf:"varint,8,opt,name=trading,proto3" json:"trading,omitempty"`
}

func (x *AllUniV2DexsReply_UniV2DexReply) Reset() {
	*x = AllUniV2DexsReply_UniV2DexReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_ample_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllUniV2DexsReply_UniV2DexReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllUniV2DexsReply_UniV2DexReply) ProtoMessage() {}

func (x *AllUniV2DexsReply_UniV2DexReply) ProtoReflect() protoreflect.Message {
	mi := &file_pb_ample_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllUniV2DexsReply_UniV2DexReply.ProtoReflect.Descriptor instead.
func (*AllUniV2DexsReply_UniV2DexReply) Descriptor() ([]byte, []int) {
	return file_pb_ample_proto_rawDescGZIP(), []int{6, 0}
}

func (x *AllUniV2DexsReply_UniV2DexReply) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AllUniV2DexsReply_UniV2DexReply) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *AllUniV2DexsReply_UniV2DexReply) GetRouterAddress() string {
	if x != nil {
		return x.RouterAddress
	}
	return ""
}

func (x *AllUniV2DexsReply_UniV2DexReply) GetFactoryAddress() string {
	if x != nil {
		return x.FactoryAddress
	}
	return ""
}

func (x *AllUniV2DexsReply_UniV2DexReply) GetSubType() string {
	if x != nil {
		return x.SubType
	}
	return ""
}

func (x *AllUniV2DexsReply_UniV2DexReply) GetFeeN() uint64 {
	if x != nil {
		return x.FeeN
	}
	return 0
}

func (x *AllUniV2DexsReply_UniV2DexReply) GetFeeD() uint64 {
	if x != nil {
		return x.FeeD
	}
	return 0
}

func (x *AllUniV2DexsReply_UniV2DexReply) GetTrading() bool {
	if x != nil {
		return x.Trading
	}
	return false
}

var File_pb_ample_proto protoreflect.FileDescriptor

var file_pb_ample_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x70, 0x62, 0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x05, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x22, 0x0e, 0x0a, 0x0c, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xc0, 0x01, 0x0a, 0x0f, 0x41, 0x6c, 0x6c, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x6f,
	0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x6f, 0x6b, 0x12, 0x3c, 0x0a, 0x07, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x41, 0x6c, 0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x52, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x1a, 0x5f, 0x0a, 0x0b, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x6f, 0x6e,
	0x12, 0x18, 0x0a, 0x07, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x22, 0x95, 0x02, 0x0a, 0x0e, 0x41,
	0x6c, 0x6c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a,
	0x02, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x6f, 0x6b, 0x12, 0x38, 0x0a,
	0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x41, 0x6c, 0x6c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52,
	0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x1a, 0xb8, 0x01, 0x0a, 0x0a, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08,
	0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x72, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x74, 0x72, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x22, 0xfc, 0x04, 0x0a, 0x1e, 0x41, 0x6c, 0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x02, 0x6f, 0x6b, 0x12, 0x69, 0x0a, 0x0f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40,
	0x2e, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x41, 0x6c, 0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x52, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73,
	0x1a, 0xde, 0x03, 0x0a, 0x1a, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x73, 0x75, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x53, 0x75, 0x6d, 0x12,
	0x71, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x55, 0x2e, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x41, 0x6c, 0x6c, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x73, 0x1a, 0x8c, 0x02, 0x0a, 0x14, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x12, 0x2a, 0x0a, 0x11, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x5f, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x77, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4f, 0x6e, 0x12, 0x1d, 0x0a,
	0x0a, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x69, 0x6e, 0x12, 0x1d, 0x0a, 0x0a,
	0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x78, 0x12, 0x2e, 0x0a, 0x13, 0x71,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x71,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d, 0x69, 0x6e, 0x12, 0x21,
	0x0a, 0x0c, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d, 0x61,
	0x78, 0x22, 0x82, 0x03, 0x0a, 0x18, 0x41, 0x6c, 0x6c, 0x4f, 0x62, 0x65, 0x78, 0x54, 0x72, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x69, 0x72, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x0e,
	0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x6f, 0x6b, 0x12, 0x4a,
	0x0a, 0x05, 0x70, 0x61, 0x69, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x41, 0x6c, 0x6c, 0x4f, 0x62, 0x65, 0x78, 0x54, 0x72, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x69, 0x72, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x4f,
	0x62, 0x65, 0x78, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x69, 0x72, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x52, 0x05, 0x70, 0x61, 0x69, 0x72, 0x73, 0x1a, 0x89, 0x02, 0x0a, 0x14, 0x4f,
	0x62, 0x65, 0x78, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x69, 0x72, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x69, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x69, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x69, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x69, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x5f, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x61, 0x73, 0x65, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x65, 0x70, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x65, 0x70, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x46, 0x65, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x74,
	0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x22, 0xb4, 0x05, 0x0a, 0x17, 0x41, 0x6c, 0x6c, 0x45, 0x76,
	0x6d, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02,
	0x6f, 0x6b, 0x12, 0x4c, 0x0a, 0x07, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x41, 0x6c, 0x6c, 0x45,
	0x76, 0x6d, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x2e, 0x45, 0x76, 0x6d, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x07, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73,
	0x1a, 0xba, 0x04, 0x0a, 0x13, 0x45, 0x76, 0x6d, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x72, 0x70,
	0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x70, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x36, 0x0a, 0x17, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x70, 0x63,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x15, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x52, 0x70, 0x63, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x18, 0x74, 0x72, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x74, 0x72, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x38, 0x0a, 0x18, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x16, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x12, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x65, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x61,
	0x73, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x61,
	0x73, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x61, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x61, 0x73, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x73, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x73, 0x18, 0x0b, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x73, 0x53, 0x70, 0x65, 0x63, 0x73, 0x12, 0x1b, 0x0a,
	0x09, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x79, 0x6e, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x79,
	0x6e, 0x63, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73,
	0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x79, 0x6e, 0x63, 0x12, 0x1f, 0x0a, 0x0b,
	0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x63, 0x61, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x22, 0xcc, 0x02,
	0x0a, 0x11, 0x41, 0x6c, 0x6c, 0x55, 0x6e, 0x69, 0x56, 0x32, 0x44, 0x65, 0x78, 0x73, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x02, 0x6f, 0x6b, 0x12, 0x3a, 0x0a, 0x04, 0x64, 0x65, 0x78, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x41, 0x6c, 0x6c, 0x55, 0x6e, 0x69,
	0x56, 0x32, 0x44, 0x65, 0x78, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x55, 0x6e, 0x69, 0x56,
	0x32, 0x44, 0x65, 0x78, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x04, 0x64, 0x65, 0x78, 0x73, 0x1a,
	0xea, 0x01, 0x0a, 0x0d, 0x55, 0x6e, 0x69, 0x56, 0x32, 0x44, 0x65, 0x78, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x25, 0x0a,
	0x0e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x19, 0x0a,
	0x08, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x73, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x05, 0x66, 0x65, 0x65, 0x5f,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x66, 0x65, 0x65, 0x4e, 0x12, 0x13, 0x0a,
	0x05, 0x66, 0x65, 0x65, 0x5f, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x66, 0x65,
	0x65, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x22, 0x1e, 0x0a, 0x0a,
	0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x43, 0x0a, 0x12,
	0x52, 0x61, 0x77, 0x4a, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02,
	0x6f, 0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x61, 0x77, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x61, 0x77, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x32, 0x8d, 0x04, 0x0a, 0x05, 0x41, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x3e, 0x0a, 0x0d, 0x47,
	0x65, 0x74, 0x41, 0x6c, 0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x13, 0x2e, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x41, 0x6c, 0x6c, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x0c, 0x47,
	0x65, 0x74, 0x41, 0x6c, 0x6c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x13, 0x2e, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x15, 0x2e, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x41, 0x6c, 0x6c, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x1c, 0x47, 0x65, 0x74,
	0x41, 0x6c, 0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x12, 0x13, 0x2e, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25,
	0x2e, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x41, 0x6c, 0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x41, 0x6c,
	0x6c, 0x4f, 0x62, 0x65, 0x78, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x69, 0x72,
	0x73, 0x12, 0x13, 0x2e, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x41,
	0x6c, 0x6c, 0x4f, 0x62, 0x65, 0x78, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x69,
	0x72, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x15, 0x47, 0x65, 0x74,
	0x41, 0x6c, 0x6c, 0x45, 0x76, 0x6d, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x13, 0x2e, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e,
	0x41, 0x6c, 0x6c, 0x45, 0x76, 0x6d, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x0f, 0x47, 0x65, 0x74,
	0x41, 0x6c, 0x6c, 0x55, 0x6e, 0x69, 0x56, 0x32, 0x44, 0x65, 0x78, 0x73, 0x12, 0x13, 0x2e, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x18, 0x2e, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x41, 0x6c, 0x6c, 0x55, 0x6e, 0x69,
	0x56, 0x32, 0x44, 0x65, 0x78, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x42, 0x0a,
	0x10, 0x47, 0x65, 0x74, 0x52, 0x61, 0x77, 0x4a, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x11, 0x2e, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x52, 0x61, 0x77,
	0x4a, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x00, 0x42, 0x09, 0x5a, 0x07, 0x2e, 0x2f, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pb_ample_proto_rawDescOnce sync.Once
	file_pb_ample_proto_rawDescData = file_pb_ample_proto_rawDesc
)

func file_pb_ample_proto_rawDescGZIP() []byte {
	file_pb_ample_proto_rawDescOnce.Do(func() {
		file_pb_ample_proto_rawDescData = protoimpl.X.CompressGZIP(file_pb_ample_proto_rawDescData)
	})
	return file_pb_ample_proto_rawDescData
}

var file_pb_ample_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_pb_ample_proto_goTypes = []interface{}{
	(*EmptyRequest)(nil),                                              // 0: ample.EmptyRequest
	(*AllSourcesReply)(nil),                                           // 1: ample.AllSourcesReply
	(*AllTokensReply)(nil),                                            // 2: ample.AllTokensReply
	(*AllSourcePositionControlsReply)(nil),                            // 3: ample.AllSourcePositionControlsReply
	(*AllObexTradingPairsReply)(nil),                                  // 4: ample.AllObexTradingPairsReply
	(*AllEvmChainClientsReply)(nil),                                   // 5: ample.AllEvmChainClientsReply
	(*AllUniV2DexsReply)(nil),                                         // 6: ample.AllUniV2DexsReply
	(*KeyRequest)(nil),                                                // 7: ample.KeyRequest
	(*RawJsonConfigReply)(nil),                                        // 8: ample.RawJsonConfigReply
	(*AllSourcesReply_SourceReply)(nil),                               // 9: ample.AllSourcesReply.SourceReply
	(*AllTokensReply_TokenReply)(nil),                                 // 10: ample.AllTokensReply.TokenReply
	(*AllSourcePositionControlsReply_SourcePositionControlReply)(nil), // 11: ample.AllSourcePositionControlsReply.SourcePositionControlReply
	(*AllSourcePositionControlsReply_SourcePositionControlReply_PositionControlReply)(nil), // 12: ample.AllSourcePositionControlsReply.SourcePositionControlReply.PositionControlReply
	(*AllObexTradingPairsReply_ObexTradingPairReply)(nil),                                  // 13: ample.AllObexTradingPairsReply.ObexTradingPairReply
	(*AllEvmChainClientsReply_EvmChainClientReply)(nil),                                    // 14: ample.AllEvmChainClientsReply.EvmChainClientReply
	(*AllUniV2DexsReply_UniV2DexReply)(nil),                                                // 15: ample.AllUniV2DexsReply.UniV2DexReply
}
var file_pb_ample_proto_depIdxs = []int32{
	9,  // 0: ample.AllSourcesReply.sources:type_name -> ample.AllSourcesReply.SourceReply
	10, // 1: ample.AllTokensReply.tokens:type_name -> ample.AllTokensReply.TokenReply
	11, // 2: ample.AllSourcePositionControlsReply.source_controls:type_name -> ample.AllSourcePositionControlsReply.SourcePositionControlReply
	13, // 3: ample.AllObexTradingPairsReply.pairs:type_name -> ample.AllObexTradingPairsReply.ObexTradingPairReply
	14, // 4: ample.AllEvmChainClientsReply.clients:type_name -> ample.AllEvmChainClientsReply.EvmChainClientReply
	15, // 5: ample.AllUniV2DexsReply.dexs:type_name -> ample.AllUniV2DexsReply.UniV2DexReply
	12, // 6: ample.AllSourcePositionControlsReply.SourcePositionControlReply.controls:type_name -> ample.AllSourcePositionControlsReply.SourcePositionControlReply.PositionControlReply
	0,  // 7: ample.Ample.GetAllSources:input_type -> ample.EmptyRequest
	0,  // 8: ample.Ample.GetAllTokens:input_type -> ample.EmptyRequest
	0,  // 9: ample.Ample.GetAllSourcePositionControls:input_type -> ample.EmptyRequest
	0,  // 10: ample.Ample.GetAllObexTradingPairs:input_type -> ample.EmptyRequest
	0,  // 11: ample.Ample.GetAllEvmChainClients:input_type -> ample.EmptyRequest
	0,  // 12: ample.Ample.GetAllUniV2Dexs:input_type -> ample.EmptyRequest
	7,  // 13: ample.Ample.GetRawJsonConfig:input_type -> ample.KeyRequest
	1,  // 14: ample.Ample.GetAllSources:output_type -> ample.AllSourcesReply
	2,  // 15: ample.Ample.GetAllTokens:output_type -> ample.AllTokensReply
	3,  // 16: ample.Ample.GetAllSourcePositionControls:output_type -> ample.AllSourcePositionControlsReply
	4,  // 17: ample.Ample.GetAllObexTradingPairs:output_type -> ample.AllObexTradingPairsReply
	5,  // 18: ample.Ample.GetAllEvmChainClients:output_type -> ample.AllEvmChainClientsReply
	6,  // 19: ample.Ample.GetAllUniV2Dexs:output_type -> ample.AllUniV2DexsReply
	8,  // 20: ample.Ample.GetRawJsonConfig:output_type -> ample.RawJsonConfigReply
	14, // [14:21] is the sub-list for method output_type
	7,  // [7:14] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_pb_ample_proto_init() }
func file_pb_ample_proto_init() {
	if File_pb_ample_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pb_ample_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmptyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_ample_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllSourcesReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_ample_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllTokensReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_ample_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllSourcePositionControlsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_ample_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllObexTradingPairsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_ample_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllEvmChainClientsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_ample_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllUniV2DexsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_ample_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_ample_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RawJsonConfigReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_ample_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllSourcesReply_SourceReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_ample_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllTokensReply_TokenReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_ample_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllSourcePositionControlsReply_SourcePositionControlReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_ample_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllSourcePositionControlsReply_SourcePositionControlReply_PositionControlReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_ample_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllObexTradingPairsReply_ObexTradingPairReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_ample_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllEvmChainClientsReply_EvmChainClientReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_ample_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllUniV2DexsReply_UniV2DexReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pb_ample_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pb_ample_proto_goTypes,
		DependencyIndexes: file_pb_ample_proto_depIdxs,
		MessageInfos:      file_pb_ample_proto_msgTypes,
	}.Build()
	File_pb_ample_proto = out.File
	file_pb_ample_proto_rawDesc = nil
	file_pb_ample_proto_goTypes = nil
	file_pb_ample_proto_depIdxs = nil
}
