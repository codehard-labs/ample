syntax = "proto3";

option go_package = "./ample";

package ample;


// A general guide of proto variables' type choices:
// Use string for big or decimal numbers that need to be accurate.
// Use int32/uint32 if the number is some usual integers.
// Avoid int64/uin64 whenever possible (it will overflow in js).
// If int32 seems not enough, use string instead.
// Use uint instead of int if the number is surely positive.


service Ample {
    rpc GetAllSources (EmptyRequest) returns (AllSourcesReply) {}
    rpc GetAllTokens (EmptyRequest) returns (AllTokensReply) {}
    rpc GetAllSourcePositionControls (EmptyRequest) returns (AllSourcePositionControlsReply) {}
    rpc GetAllObexTradingPairs (EmptyRequest) returns (AllObexTradingPairsReply) {}
    rpc GetAllEvmChainClients (EmptyRequest) returns (AllEvmChainClientsReply) {}
    rpc GetAllUniV2Dexs (EmptyRequest) returns (AllUniV2DexsReply) {}
    //
    rpc GetRawJsonConfig (KeyRequest) returns (RawJsonConfigReply) {}
}

message EmptyRequest {
}

message AllSourcesReply {
    bool ok = 1;
    message SourceReply {
        string name = 1;
        string type = 2;
        bool on = 3;
        bool trading = 4;
    }
    repeated SourceReply sources = 3;
}

message AllTokensReply {
    bool ok = 1;
    message TokenReply {
        string asset_name = 1;
        string group_name = 2;
        string source = 3;
        string identifier = 4;
        uint32 decimals = 5;
        bool trading = 6;
    }
    repeated TokenReply tokens = 2;
}

message AllSourcePositionControlsReply {
    bool ok = 1;
    message SourcePositionControlReply {
        message PositionControlReply {
            string asset = 1;
            bool weight_control_on = 2;
            int32 weight_min = 3;
            int32 weight_max = 4;
            bool quantity_control_on = 5;
            string quantity_min = 6;
            string quantity_max = 7;
        }
        string source_name = 1;
        int32 weight_sum = 2;
        repeated PositionControlReply controls = 3;
    }
    repeated SourcePositionControlReply source_controls = 2;
}

message AllObexTradingPairsReply {
    bool ok = 1;
    message ObexTradingPairReply {
        string pair_name = 1;
        string pair_type = 2;
        string exchange_name = 3;
        string quote_asset = 4;
        string base_asset = 5;
        string step_size = 6;
        string taker_fee = 7;
        bool trading = 8;
    }
    repeated ObexTradingPairReply pairs = 2;
}

message AllEvmChainClientsReply {
    bool ok = 1;
    message EvmChainClientReply {
        string chain_name = 1;
        uint64 chain_id = 2;
        string native_asset = 3;
        string query_rpc_address = 4;
        string exec_rpc_address = 5;
        string trading_contract_address = 6;
        string trading_contract_version = 7;
        uint32 registered_workers = 8;
        string gas_mode = 9;
        string gas_type = 10;
        repeated string gas_specs = 11;
        string sync_mode = 12;
        uint64 blocks_before_resync = 13;
    }
    repeated EvmChainClientReply clients = 2;
}

message AllUniV2DexsReply {
    bool ok = 1;
    message UniV2DexReply {
        string name = 1;
        string source = 2;
        string router_address = 3;
        string factory_address = 4;
        string sub_type = 5;
        uint32 fee_rev = 6;
        bool trading = 7;
    }
    repeated UniV2DexReply dexs = 2;
}

message KeyRequest {
    string key = 1;
}

message RawJsonConfigReply {
    bool ok = 1;
    string raw_string = 2;
}